import { PayloadAction, createSlice } from '@reduxjs/toolkit'

// PayloadAction is a type for defining actions with a payload
// createSlice is a function used to create Redux slices

export interface Movie {
    _id: string
    id: string
    primaryImage: {
        id: string
        width: number
        height: number
        url: string
        caption: {
            plainText: string
            __typename: string
        }
        __typename: string
    }
    titleType: {
        text: string
        id: string
        isSeries: boolean
        isEpisode: boolean
        __typename: string
    }
    titleText: {
        text: string
        __typename: string
    }
    originalTitleText: {
        text: string
        __typename: string
    }
    releaseYear: {
        year: number
        endYear: null | number
        __typename: string
        releaseDate: null | number
    }
}

interface MovieState {
    movies: Movie[]
}

const initialState: MovieState = {
    movies: [],
}
// using the createSlice function to create a Redux slice named 'movie'
export const MovieSlice = createSlice({
    name: 'movie',
    initialState, // it takes an initialState and an object containing reducers
    reducers: {
        // Reducers are functions that take the current state and an action as arguments, and return a new state result
        // in this case, there's only one reducer called addMovies
        // this reducer takes the current state and a payload containing an array of movies
        // and adds them to the movies array.
        addMovies: (state, action: PayloadAction<{ movies: Movie[] }>) => {
            const newMovies = action.payload.movies
            // Create Set cause it does not allow having dublications and its easy to just ask if it already has the current element inside
            const movieIdsInState = new Set(
                state.movies.map((movie) => movie.id)
            )

            // Filter out movies that already exist in the state
            const uniqueNewMovies = newMovies.filter(
                (movie) => !movieIdsInState.has(movie.id)
            )

            // Add the unique new movies to the state
            state.movies.push(...uniqueNewMovies)
        },
    },
})

export default MovieSlice.reducer
// The reducer is used to update the state in the Redux store
// In Redux Toolkit's createSlice function, the property is called reducers (plural),
// but when you access the generated reducer from the resulting slice, it is named reducer s(singular)
export const { addMovies } = MovieSlice.actions
// and the action creator is used to dispatch the addMovies action

// this line of code is using destructuring to extract the addMovies action creator from the actions object
// of MovieSlice. The actions object is automatically generated by createSlice based on the defined reducers

// if I had multiple reducers in the reducers property, the actions object would have multiple properties,
// each corresponding to a reducer name.destructing them would look like this:
// const { addMovies, anotherReducerAction, yetAnotherReducerAction } = MovieSlice.actions;
